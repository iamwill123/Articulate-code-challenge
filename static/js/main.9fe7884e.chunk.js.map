{"version":3,"sources":["helpers/initialData/FlashCardInitialData.ts","icons/flipIcon.svg","components/FlashCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialData","id","data","front","text","imgUrl","back","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fill","fillRule","d","_ref","svgRef","title","props","width","height","viewBox","focusable","ref","ForwardRef","forwardRef","FlashCard","card","useState","toggle","setToggle","imgLoaded","console","log","FlipButton","className","BackOfCard","onLoad","src","alt","FrontOfCard","onClick","App","setData","useEffect","FlashCardsMockData","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9fe7884e.chunk.js","sourcesContent":["import { FlashCards } from '../interfaces/FlashCards';\n\nexport const initialData: FlashCards[] = [\n  {\n    id: '1',\n    data: { front: { text: '', imgUrl: '' }, back: { text: '', imgUrl: '' }, }\n  }\n  ,\n  {\n    id: '2',\n    data: { front: { text: '', imgUrl: '' }, back: { text: '', imgUrl: '' }, }\n  },\n  {\n    id: '3',\n    data: { front: { text: '', imgUrl: '' }, back: { text: '', imgUrl: '' }, }\n  }\n];","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#707070\",\n  fillRule: \"nonzero\",\n  d: \"M19.347 8.275l1.88 1.714a.727.727 0 0 0 .98-1.074l-3.225-2.941a.727.727 0 0 0-1.027.047l-2.94 3.224a.727.727 0 0 0 1.075.98l1.802-1.976a6.545 6.545 0 0 1-11.56 4.288.727.727 0 1 0-1.114.935 8 8 0 0 0 14.129-5.197zm-16.039.162l-1.79-1.633a.727.727 0 1 0-.98 1.074l3.223 2.94c.297.272.757.25 1.028-.046l2.94-3.224a.727.727 0 0 0-1.075-.98L4.768 8.636a6.545 6.545 0 0 1 11.555-4.482.727.727 0 1 0 1.114-.936A8 8 0 0 0 3.308 8.437z\"\n});\n\nvar SvgFlipIcon = function SvgFlipIcon(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 23,\n    height: 17,\n    viewBox: \"0 0 23 17\",\n    focusable: \"false\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgFlipIcon, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/flipIcon.9ae13e8b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC, useState } from 'react';\nimport { FlashCards } from '../helpers/interfaces/FlashCards';\nimport { ReactComponent as FlipIcon } from '../icons/flipIcon.svg';\n\ninterface IProps {\n  card: FlashCards;\n}\nconst FlashCard: FC<IProps> = ({ card }) => {\n  const [toggle, setToggle] = useState(false);\n\n  const {\n    data: { front, back },\n  } = card;\n\n  const onToggle = () => {\n    setToggle(!toggle);\n  };\n\n  const imgLoaded = () => {\n    console.log('image loaded!');\n  };\n\n  const FlipButton = () => (\n    <div className=\"flip-button\" title=\"Click to flip\">\n      <FlipIcon />\n    </div>\n  );\n\n  const BackOfCard = () => (\n    <div className=\"back\">\n      <div className=\"content\">\n        {back.text && (\n          <div className=\"text\">\n            <span>{back.text}</span>\n          </div>\n        )}\n        {back.imgUrl && (\n          <img\n            onLoad={imgLoaded}\n            className=\"img-url\"\n            src={back.imgUrl}\n            alt={back.text || 'a special back image'}\n          />\n        )}\n      </div>\n      <FlipButton />\n    </div>\n  );\n\n  const FrontOfCard = () => (\n    <div className=\"front\">\n      <div className=\"content\">\n        {front.text && (\n          <div className=\"text\">\n            <span>{front.text}</span>\n          </div>\n        )}\n        {front.imgUrl && (\n          <img\n            onLoad={imgLoaded}\n            className=\"img-url\"\n            src={front.imgUrl}\n            alt={front.text || 'a front special image'}\n          />\n        )}\n      </div>\n      <FlipButton />\n    </div>\n  );\n\n  return (\n    <div\n      onClick={onToggle}\n      className={`flashcard-scene ${toggle ? 'is-scaled' : ''}`}\n    >\n      <div className={`flashcard ${toggle ? 'is-flipped' : ''}`}>\n        <BackOfCard />\n        <FrontOfCard />\n      </div>\n    </div>\n  );\n};\n\nexport default FlashCard;\n","import React, { FC, useEffect, useState } from 'react';\nimport './App.css';\nimport FlashCardsMockData from './helpers/mockData/FlashCardsMockData.json';\nimport { initialData } from './helpers/initialData/FlashCardInitialData';\nimport { FlashCards } from './helpers/interfaces/FlashCards';\nimport FlashCard from './components/FlashCard';\n\nconst App: FC = () => {\n  const [data, setData] = useState<FlashCards[]>(initialData);\n\n  useEffect(() => {\n    setData(FlashCardsMockData);\n  }, []);\n\n  return (\n    <div className=\"flashcard-wrapper\">\n      <div className=\"flashcard-container\">\n        {data.map((card) => (\n          <FlashCard key={card.id} card={card} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}